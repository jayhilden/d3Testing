<!DOCTYPE html>

<html>
<head>
    <title>Hilden D3 Map test</title>

    <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
    <link rel="stylesheet" type="text/css" href="/main.css"/>    
</head>
<body>
    <script charset="utf-8" src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.3/d3.min.js"></script>
    <script charset="utf-8" src="/Scripts/D3Helpers.js"></script>
    
    @*<script charset="utf-8" src="https://rawgithub.com/artzub/dbsv/master/progressbar.js"></script>
    <script charset="utf-8" src="https://rawgithub.com/artzub/dbsv/master/tooltip.js"></script>
    <script charset="utf-8" src="https://rawgithub.com/artzub/wbgds/smy/wbc.js"></script>*@

<script>
    "use strict";

    (function(window) {
        var lastTime = 0;
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
            window.cancelAnimationFrame =
                window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
        }

        if (!window.requestAnimationFrame)
            window.requestAnimationFrame = function(callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function() { callback(currTime + timeToCall); },
                    timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };

        if (!window.cancelAnimationFrame)
            window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
    })(window);

    $(document).ready(function() {
        InitializeD3WorldMap();
    });

    var fsvg;

    function InitializeD3WorldMap() {
        fsvg = d3.select(document.body)
            .append("div")
            .attr("id", "map")
            .append("svg");

        var feature = fsvg
            .selectAll("path.feature");

        d3.json("/world-countries.json", function(error, collection) {
            feature = feature
                .data(collection.features)
                .enter()
                .append("path")
                .attr("class", "feature");

            var div = d3.select(document.body).append("div").attr("id", "c");
            var w = document.body.clientWidth;
            var h = document.body.clientHeight;

            projection
                .scale(w / 6.5)
                .translate([w / 2, h / 1.6]);

            zoom.translate(projection.translate())
                .scale(projection.scale())
                .scaleExtent([h / 6, h]);

            feature.attr("d", path);

            console.log('InitializeD3 complete');
        });
        d3.json("@Url.Action("Data")", DataLoadCallback);

    }

    function DataLoadCallback(error, data) {
        var parsedData = data.map(DataMapper);
        var pointsToAddToMap = [];
        var pointsInList = new Object();
        parsedData.forEach(function (i) {
            if (!pointsInList[i.From.uniqueID]) {
                pointsInList[i.From.uniqueID] = 1;
                pointsToAddToMap.push(i.From);
            }
            if (!pointsInList[i.To.uniqueID]) {
                pointsInList[i.To.uniqueID] = 1;
                pointsToAddToMap.push(i.To);
            }
        });

        var circle = fsvg.selectAll("circle")
            .data(pointsToAddToMap)
            .enter()
            .append("circle")
            .attr("r", 1)
            .attr("fill", "#fff")
            .attr("transform", function (coord) {
                //debugger;
                var proj = coord.projection();        
                return "translate(" + proj + ")";
                });
    }

    function DataMapper(dataItem) {

        dataItem.From = Coordinate(dataItem.FromLocation.Longitude, dataItem.FromLocation.Latitude);
        dataItem.To = Coordinate(dataItem.ToLocation.Longitude, dataItem.ToLocation.Latitude);
        //var f1 = dataItem.From.projection();
        //var f2 = dataItem.To.projection();
        //debugger;
        return dataItem;
    }




</script>



@*<script type="text/javascript" src="/Window.js"></script>
    <script type="text/javascript" src="/Hilden.js"></script>*@
    
</body>
</html>